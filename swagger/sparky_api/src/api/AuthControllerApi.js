/**
 * Sparkyservice API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AuthenticationInfoDto from '../model/AuthenticationInfoDto';
import CredentialsDto from '../model/CredentialsDto';
import ErrorDto from '../model/ErrorDto';

/**
* AuthController service.
* @module api/AuthControllerApi
* @version 1.0.1-SNAPSHOT
*/
export default class AuthControllerApi {

    /**
    * Constructs a new AuthControllerApi. 
    * @alias module:api/AuthControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the authenticate operation.
     * @callback module:api/AuthControllerApi~authenticateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authentication / Login
     * Authenticates the user and sets a JWT into the authorization header
     * @param {module:api/AuthControllerApi~authenticateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationInfoDto}
     */
    authenticate(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*', 'application/json'];
      let returnType = AuthenticationInfoDto;

      return this.apiClient.callApi(
        '/api/v1/authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the checkTokenAuthenticationStatus operation.
     * @callback module:api/AuthControllerApi~checkTokenAuthenticationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the authentication state of the users authorization header and returns all  user informations which belongs to the user
     * @param {module:api/AuthControllerApi~checkTokenAuthenticationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationInfoDto}
     */
    checkTokenAuthenticationStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer-key'];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json'];
      let returnType = AuthenticationInfoDto;

      return this.apiClient.callApi(
        '/api/v1/authenticate/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verifyTokenValidity operation.
     * @callback module:api/AuthControllerApi~verifyTokenValidityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationInfoDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prints the validity status of a given token
     * @param {module:api/AuthControllerApi~verifyTokenValidityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationInfoDto}
     */
    verifyTokenValidity(jwtToken, callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'jwtToken': jwtToken
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer-key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AuthenticationInfoDto;

      return this.apiClient.callApi(
        '/api/v1/authenticate/verify', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
