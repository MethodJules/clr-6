/**
 * Sparkyservice API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import UserDto from '../model/UserDto';
import UsernameDto from '../model/UsernameDto';

/**
* UserController service.
* @module api/UserControllerApi
* @version 1.0.1-SNAPSHOT
*/
export default class UserControllerApi {

    /**
    * Constructs a new UserControllerApi. 
    * @alias module:api/UserControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createLocalUser operation.
     * @callback module:api/UserControllerApi~createLocalUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new local user
     * @param {module:api/UserControllerApi~createLocalUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDto}
     */
    createLocalUser(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer-key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserDto;

      return this.apiClient.callApi(
        '/api/v1/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UserControllerApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user
     * @param {module:api/UserControllerApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(realm, username, callback) {
      let postBody = null;

      let pathParams = {
        'realm': realm,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer-key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v1/users/{realm}/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editUser operation.
     * @callback module:api/UserControllerApi~editUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edits users (in any realm)
     * Edit and return the new user
     * @param {module:api/UserControllerApi~editUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDto}
     */
    editUser(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer-key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserDto;

      return this.apiClient.callApi(
        '/api/v1/users', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllUsers operation.
     * @callback module:api/UserControllerApi~getAllUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all users from all supported realms
     * @param {module:api/UserControllerApi~getAllUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDto>}
     */
    getAllUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer-key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserDto];

      return this.apiClient.callApi(
        '/api/v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllUsersFromRealm operation.
     * @callback module:api/UserControllerApi~getAllUsersFromRealmCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all users from a single realm
     * @param {module:api/UserControllerApi~getAllUsersFromRealmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserDto>}
     */
    getAllUsersFromRealm(realm, callback) {
      let postBody = null;

      let pathParams = {
        'realm': realm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer-key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserDto];

      return this.apiClient.callApi(
        '/api/v1/users/{realm}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UserControllerApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a unique user
     * @param {module:api/UserControllerApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDto}
     */
    getUser(realm, username, callback) {
      let postBody = null;

      let pathParams = {
        'realm': realm,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer-key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserDto;

      return this.apiClient.callApi(
        '/api/v1/users/{realm}/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
